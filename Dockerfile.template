FROM balenalib/%%BALENA_ARCH%%-ubuntu:focal-run

RUN install_packages exfat-fuse \
    exfat-utils \
    grep \
    ntfs-3g \
    psmisc \
    samba \
    util-linux

RUN addgroup smbgroup 

COPY udev/usb.rules /etc/udev/rules.d/usb.rules

WORKDIR /usr/src
COPY config config
COPY scripts scripts
RUN chmod +x scripts/*
RUN ln -fs /usr/src/scripts/drive.sh /usr/local/bin/drive

VOLUME ["/etc", \
    "/var/cache/samba", \
    "/var/lib/samba", \
    "/var/log/samba",\
    "/run/samba"]

ENV UDEV=on
ENV CONFIG_DIR=/usr/src/config
ENV SAMBA_ROOT=/samba

EXPOSE 139 445

CMD ["bash", "scripts/start.sh", "--foreground", "--log-stdout", "--no-process-group"]

# base-image for node on any machine using a template variable,
# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/#dockerfile-templates
# and about balena base images here: https://www.balena.io/docs/reference/base-images/base-images/
FROM balenalib/%%BALENA_MACHINE_NAME%%-node:latest

# use `install_packages` if you need to install dependencies,
# for instance if you need git, just uncomment the line below.
# RUN install_packages git

# Defines our working directory in container
WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package.json package-lock.json ./

# This install npm dependencies on the balena build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --unsafe-perm && npm cache verify && rm -rf /tmp/*

# This will copy all files in our root to the working directory in the container
COPY . ./

# Build dist
RUN npm run build

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# server.js will run when container starts up on the device
CMD ["npm", "start"]

